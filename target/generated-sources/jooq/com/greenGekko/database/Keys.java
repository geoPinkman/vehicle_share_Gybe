/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database;


import com.greenGekko.database.tables.FlywaySchemaHistory;
import com.greenGekko.database.tables.OwnerOptions;
import com.greenGekko.database.tables.Owners;
import com.greenGekko.database.tables.Roles;
import com.greenGekko.database.tables.Users;
import com.greenGekko.database.tables.UsersAuth;
import com.greenGekko.database.tables.UsersRoles;
import com.greenGekko.database.tables.VehicleDocuments;
import com.greenGekko.database.tables.VehiclePatterns;
import com.greenGekko.database.tables.VehiclePictures;
import com.greenGekko.database.tables.VehicleRentDates;
import com.greenGekko.database.tables.Vehicles;
import com.greenGekko.database.tables.records.FlywaySchemaHistoryRecord;
import com.greenGekko.database.tables.records.OwnerOptionsRecord;
import com.greenGekko.database.tables.records.OwnersRecord;
import com.greenGekko.database.tables.records.RolesRecord;
import com.greenGekko.database.tables.records.UsersAuthRecord;
import com.greenGekko.database.tables.records.UsersRecord;
import com.greenGekko.database.tables.records.UsersRolesRecord;
import com.greenGekko.database.tables.records.VehicleDocumentsRecord;
import com.greenGekko.database.tables.records.VehiclePatternsRecord;
import com.greenGekko.database.tables.records.VehiclePicturesRecord;
import com.greenGekko.database.tables.records.VehicleRentDatesRecord;
import com.greenGekko.database.tables.records.VehiclesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<OwnerOptionsRecord> OWNEROPTIONSPKEY = Internal.createUniqueKey(OwnerOptions.OWNER_OPTIONS, DSL.name("owneroptionspkey"), new TableField[] { OwnerOptions.OWNER_OPTIONS.ID }, true);
    public static final UniqueKey<OwnersRecord> OWNERSPKEY = Internal.createUniqueKey(Owners.OWNERS, DSL.name("ownerspkey"), new TableField[] { Owners.OWNERS.ID }, true);
    public static final UniqueKey<RolesRecord> ROLESPKEY = Internal.createUniqueKey(Roles.ROLES, DSL.name("rolespkey"), new TableField[] { Roles.ROLES.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_UUID_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_uuid_key"), new TableField[] { Users.USERS.UUID }, true);
    public static final UniqueKey<UsersRecord> USERSPKEY = Internal.createUniqueKey(Users.USERS, DSL.name("userspkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersAuthRecord> USERSAUTHPKEY = Internal.createUniqueKey(UsersAuth.USERS_AUTH, DSL.name("usersauthpkey"), new TableField[] { UsersAuth.USERS_AUTH.ID }, true);
    public static final UniqueKey<UsersRolesRecord> USERSROLESPKEY = Internal.createUniqueKey(UsersRoles.USERS_ROLES, DSL.name("usersrolespkey"), new TableField[] { UsersRoles.USERS_ROLES.ID }, true);
    public static final UniqueKey<VehicleDocumentsRecord> VEHICLEDOCUMENTSPK = Internal.createUniqueKey(VehicleDocuments.VEHICLE_DOCUMENTS, DSL.name("vehicledocumentspk"), new TableField[] { VehicleDocuments.VEHICLE_DOCUMENTS.ID }, true);
    public static final UniqueKey<VehiclePatternsRecord> ALLFIELDSAREUNIQUE = Internal.createUniqueKey(VehiclePatterns.VEHICLE_PATTERNS, DSL.name("allfieldsareunique"), new TableField[] { VehiclePatterns.VEHICLE_PATTERNS.VEHICLE_TYPE, VehiclePatterns.VEHICLE_PATTERNS.COMPANY, VehiclePatterns.VEHICLE_PATTERNS.MODEL, VehiclePatterns.VEHICLE_PATTERNS.COLOR, VehiclePatterns.VEHICLE_PATTERNS.GEARBOX, VehiclePatterns.VEHICLE_PATTERNS.ENGINE_VALUE, VehiclePatterns.VEHICLE_PATTERNS.YEAR_OF_ISSUE }, true);
    public static final UniqueKey<VehiclePatternsRecord> VEHICLEPATTERNSPKEY = Internal.createUniqueKey(VehiclePatterns.VEHICLE_PATTERNS, DSL.name("vehiclepatternspkey"), new TableField[] { VehiclePatterns.VEHICLE_PATTERNS.ID }, true);
    public static final UniqueKey<VehiclePicturesRecord> VEHICLEPICTURESPK = Internal.createUniqueKey(VehiclePictures.VEHICLE_PICTURES, DSL.name("vehiclepicturespk"), new TableField[] { VehiclePictures.VEHICLE_PICTURES.ID }, true);
    public static final UniqueKey<VehicleRentDatesRecord> RENTDATESPKEY = Internal.createUniqueKey(VehicleRentDates.VEHICLE_RENT_DATES, DSL.name("rentdatespkey"), new TableField[] { VehicleRentDates.VEHICLE_RENT_DATES.ID }, true);
    public static final UniqueKey<VehiclesRecord> VEHICLESPKEY = Internal.createUniqueKey(Vehicles.VEHICLES, DSL.name("vehiclespkey"), new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final UniqueKey<VehiclesRecord> VEHICLESUUIDKEY = Internal.createUniqueKey(Vehicles.VEHICLES, DSL.name("vehiclesuuidkey"), new TableField[] { Vehicles.VEHICLES.UUID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<OwnerOptionsRecord, OwnersRecord> OWNER_OPTIONS__OWNERSIDFK = Internal.createForeignKey(OwnerOptions.OWNER_OPTIONS, DSL.name("ownersidfk"), new TableField[] { OwnerOptions.OWNER_OPTIONS.OWNER_ID }, Keys.OWNERSPKEY, new TableField[] { Owners.OWNERS.ID }, true);
    public static final ForeignKey<OwnersRecord, UsersRecord> OWNERS__OWNERS_USER_ID_FKEY = Internal.createForeignKey(Owners.OWNERS, DSL.name("owners_user_id_fkey"), new TableField[] { Owners.OWNERS.USER_ID }, Keys.USERSPKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UsersRolesRecord, RolesRecord> USERS_ROLES__USERS_ROLES_ROLE_ID_FKEY = Internal.createForeignKey(UsersRoles.USERS_ROLES, DSL.name("users_roles_role_id_fkey"), new TableField[] { UsersRoles.USERS_ROLES.ROLE_ID }, Keys.ROLESPKEY, new TableField[] { Roles.ROLES.ID }, true);
    public static final ForeignKey<UsersRolesRecord, UsersRecord> USERS_ROLES__USERS_ROLES_USER_ID_FKEY = Internal.createForeignKey(UsersRoles.USERS_ROLES, DSL.name("users_roles_user_id_fkey"), new TableField[] { UsersRoles.USERS_ROLES.USER_ID }, Keys.USERSPKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<VehicleDocumentsRecord, VehiclesRecord> VEHICLE_DOCUMENTS__VEHICLESOWNERIDFK = Internal.createForeignKey(VehicleDocuments.VEHICLE_DOCUMENTS, DSL.name("vehiclesowneridfk"), new TableField[] { VehicleDocuments.VEHICLE_DOCUMENTS.VEHICLE_ID }, Keys.VEHICLESPKEY, new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final ForeignKey<VehiclePicturesRecord, VehiclesRecord> VEHICLE_PICTURES__VEHICLEPICTURESVEHICLEIDFK = Internal.createForeignKey(VehiclePictures.VEHICLE_PICTURES, DSL.name("vehiclepicturesvehicleidfk"), new TableField[] { VehiclePictures.VEHICLE_PICTURES.VEHICLE_ID }, Keys.VEHICLESPKEY, new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final ForeignKey<VehicleRentDatesRecord, VehiclesRecord> VEHICLE_RENT_DATES__RENTDATESVEHICLEIDFK = Internal.createForeignKey(VehicleRentDates.VEHICLE_RENT_DATES, DSL.name("rentdatesvehicleidfk"), new TableField[] { VehicleRentDates.VEHICLE_RENT_DATES.VEHICLE_ID }, Keys.VEHICLESPKEY, new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final ForeignKey<VehiclesRecord, VehiclePatternsRecord> VEHICLES__VEHICLEPATTERNSIDFK = Internal.createForeignKey(Vehicles.VEHICLES, DSL.name("vehiclepatternsidfk"), new TableField[] { Vehicles.VEHICLES.VEHICLE_PATTERN_ID }, Keys.VEHICLEPATTERNSPKEY, new TableField[] { VehiclePatterns.VEHICLE_PATTERNS.ID }, true);
    public static final ForeignKey<VehiclesRecord, OwnersRecord> VEHICLES__VEHICLESOWNERIDFK = Internal.createForeignKey(Vehicles.VEHICLES, DSL.name("vehiclesowneridfk"), new TableField[] { Vehicles.VEHICLES.OWNER_ID }, Keys.OWNERSPKEY, new TableField[] { Owners.OWNERS.ID }, true);
}
