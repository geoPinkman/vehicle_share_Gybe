/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.VehiclesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vehicles extends TableImpl<VehiclesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicles</code>
     */
    public static final Vehicles VEHICLES = new Vehicles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiclesRecord> getRecordType() {
        return VehiclesRecord.class;
    }

    /**
     * The column <code>public.vehicles.id</code>.
     */
    public final TableField<VehiclesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vehicles.vehicle_pattern_id</code>.
     */
    public final TableField<VehiclesRecord, Integer> VEHICLE_PATTERN_ID = createField(DSL.name("vehicle_pattern_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vehicles.owner_id</code>.
     */
    public final TableField<VehiclesRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vehicles.uuid</code>.
     */
    public final TableField<VehiclesRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vehicles.price_per_day</code>.
     */
    public final TableField<VehiclesRecord, Integer> PRICE_PER_DAY = createField(DSL.name("price_per_day"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.vehicles.price_per_month</code>.
     */
    public final TableField<VehiclesRecord, Integer> PRICE_PER_MONTH = createField(DSL.name("price_per_month"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.vehicles.deposit</code>.
     */
    public final TableField<VehiclesRecord, Integer> DEPOSIT = createField(DSL.name("deposit"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.vehicles.description</code>.
     */
    public final TableField<VehiclesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.vehicles.logo</code>.
     */
    public final TableField<VehiclesRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.vehicles.created_at</code>.
     */
    public final TableField<VehiclesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.vehicles.updated_at</code>.
     */
    public final TableField<VehiclesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.vehicles.available_now</code>.
     */
    public final TableField<VehiclesRecord, Boolean> AVAILABLE_NOW = createField(DSL.name("available_now"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Vehicles(Name alias, Table<VehiclesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehicles(Name alias, Table<VehiclesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    public Vehicles(String alias) {
        this(DSL.name(alias), VEHICLES);
    }

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    public Vehicles(Name alias) {
        this(alias, VEHICLES);
    }

    /**
     * Create a <code>public.vehicles</code> table reference
     */
    public Vehicles() {
        this(DSL.name("vehicles"), null);
    }

    public <O extends Record> Vehicles(Table<O> child, ForeignKey<O, VehiclesRecord> key) {
        super(child, key, VEHICLES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<VehiclesRecord, Integer> getIdentity() {
        return (Identity<VehiclesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehiclesRecord> getPrimaryKey() {
        return Keys.VEHICLESPKEY;
    }

    @Override
    public List<UniqueKey<VehiclesRecord>> getKeys() {
        return Arrays.<UniqueKey<VehiclesRecord>>asList(Keys.VEHICLESPKEY, Keys.VEHICLESUUIDKEY);
    }

    @Override
    public List<ForeignKey<VehiclesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VehiclesRecord, ?>>asList(Keys.VEHICLES__VEHICLEPATTERNSIDFK, Keys.VEHICLES__VEHICLESOWNERIDFK);
    }

    private transient VehiclePatterns _vehiclePatterns;
    private transient Owners _owners;

    public VehiclePatterns vehiclePatterns() {
        if (_vehiclePatterns == null)
            _vehiclePatterns = new VehiclePatterns(this, Keys.VEHICLES__VEHICLEPATTERNSIDFK);

        return _vehiclePatterns;
    }

    public Owners owners() {
        if (_owners == null)
            _owners = new Owners(this, Keys.VEHICLES__VEHICLESOWNERIDFK);

        return _owners;
    }

    @Override
    public List<Check<VehiclesRecord>> getChecks() {
        return Arrays.<Check<VehiclesRecord>>asList(
              Internal.createCheck(this, DSL.name("deposit"), "((deposit >= 0))", true)
            , Internal.createCheck(this, DSL.name("priceperday"), "((price_per_day >= 0))", true)
            , Internal.createCheck(this, DSL.name("pricepermonth"), "((price_per_month >= 0))", true)
        );
    }

    @Override
    public Vehicles as(String alias) {
        return new Vehicles(DSL.name(alias), this);
    }

    @Override
    public Vehicles as(Name alias) {
        return new Vehicles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicles rename(String name) {
        return new Vehicles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicles rename(Name name) {
        return new Vehicles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, Integer, java.util.UUID, Integer, Integer, Integer, String, String, OffsetDateTime, OffsetDateTime, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
