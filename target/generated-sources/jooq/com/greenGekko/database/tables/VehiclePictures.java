/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.VehiclePicturesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehiclePictures extends TableImpl<VehiclePicturesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicle_pictures</code>
     */
    public static final VehiclePictures VEHICLE_PICTURES = new VehiclePictures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiclePicturesRecord> getRecordType() {
        return VehiclePicturesRecord.class;
    }

    /**
     * The column <code>public.vehicle_pictures.id</code>.
     */
    public final TableField<VehiclePicturesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle_pictures.vehicle_id</code>.
     */
    public final TableField<VehiclePicturesRecord, Integer> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vehicle_pictures.picture_url</code>.
     */
    public final TableField<VehiclePicturesRecord, String> PICTURE_URL = createField(DSL.name("picture_url"), SQLDataType.VARCHAR(512), this, "");

    private VehiclePictures(Name alias, Table<VehiclePicturesRecord> aliased) {
        this(alias, aliased, null);
    }

    private VehiclePictures(Name alias, Table<VehiclePicturesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicle_pictures</code> table reference
     */
    public VehiclePictures(String alias) {
        this(DSL.name(alias), VEHICLE_PICTURES);
    }

    /**
     * Create an aliased <code>public.vehicle_pictures</code> table reference
     */
    public VehiclePictures(Name alias) {
        this(alias, VEHICLE_PICTURES);
    }

    /**
     * Create a <code>public.vehicle_pictures</code> table reference
     */
    public VehiclePictures() {
        this(DSL.name("vehicle_pictures"), null);
    }

    public <O extends Record> VehiclePictures(Table<O> child, ForeignKey<O, VehiclePicturesRecord> key) {
        super(child, key, VEHICLE_PICTURES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VehiclePicturesRecord> getPrimaryKey() {
        return Keys.VEHICLEPICTURESPK;
    }

    @Override
    public List<UniqueKey<VehiclePicturesRecord>> getKeys() {
        return Arrays.<UniqueKey<VehiclePicturesRecord>>asList(Keys.VEHICLEPICTURESPK);
    }

    @Override
    public List<ForeignKey<VehiclePicturesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VehiclePicturesRecord, ?>>asList(Keys.VEHICLE_PICTURES__VEHICLEPICTURESVEHICLEIDFK);
    }

    private transient Vehicles _vehicles;

    public Vehicles vehicles() {
        if (_vehicles == null)
            _vehicles = new Vehicles(this, Keys.VEHICLE_PICTURES__VEHICLEPICTURESVEHICLEIDFK);

        return _vehicles;
    }

    @Override
    public VehiclePictures as(String alias) {
        return new VehiclePictures(DSL.name(alias), this);
    }

    @Override
    public VehiclePictures as(Name alias) {
        return new VehiclePictures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VehiclePictures rename(String name) {
        return new VehiclePictures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VehiclePictures rename(Name name) {
        return new VehiclePictures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
