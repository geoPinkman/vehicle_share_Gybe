/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.VehicleRentDatesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.LocalDateAsLocalDateTimeBinding;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehicleRentDates extends TableImpl<VehicleRentDatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicle_rent_dates</code>
     */
    public static final VehicleRentDates VEHICLE_RENT_DATES = new VehicleRentDates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleRentDatesRecord> getRecordType() {
        return VehicleRentDatesRecord.class;
    }

    /**
     * The column <code>public.vehicle_rent_dates.id</code>.
     */
    public final TableField<VehicleRentDatesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vehicle_rent_dates.vehicle_id</code>.
     */
    public final TableField<VehicleRentDatesRecord, Integer> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vehicle_rent_dates.date_from</code>.
     */
    public final TableField<VehicleRentDatesRecord, LocalDateTime> DATE_FROM = createField(DSL.name("date_from"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "", new LocalDateAsLocalDateTimeBinding());

    /**
     * The column <code>public.vehicle_rent_dates.date_to</code>.
     */
    public final TableField<VehicleRentDatesRecord, LocalDateTime> DATE_TO = createField(DSL.name("date_to"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "", new LocalDateAsLocalDateTimeBinding());

    private VehicleRentDates(Name alias, Table<VehicleRentDatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private VehicleRentDates(Name alias, Table<VehicleRentDatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicle_rent_dates</code> table reference
     */
    public VehicleRentDates(String alias) {
        this(DSL.name(alias), VEHICLE_RENT_DATES);
    }

    /**
     * Create an aliased <code>public.vehicle_rent_dates</code> table reference
     */
    public VehicleRentDates(Name alias) {
        this(alias, VEHICLE_RENT_DATES);
    }

    /**
     * Create a <code>public.vehicle_rent_dates</code> table reference
     */
    public VehicleRentDates() {
        this(DSL.name("vehicle_rent_dates"), null);
    }

    public <O extends Record> VehicleRentDates(Table<O> child, ForeignKey<O, VehicleRentDatesRecord> key) {
        super(child, key, VEHICLE_RENT_DATES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<VehicleRentDatesRecord, Integer> getIdentity() {
        return (Identity<VehicleRentDatesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehicleRentDatesRecord> getPrimaryKey() {
        return Keys.RENTDATESPKEY;
    }

    @Override
    public List<UniqueKey<VehicleRentDatesRecord>> getKeys() {
        return Arrays.<UniqueKey<VehicleRentDatesRecord>>asList(Keys.RENTDATESPKEY);
    }

    @Override
    public List<ForeignKey<VehicleRentDatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VehicleRentDatesRecord, ?>>asList(Keys.VEHICLE_RENT_DATES__RENTDATESVEHICLEIDFK);
    }

    private transient Vehicles _vehicles;

    public Vehicles vehicles() {
        if (_vehicles == null)
            _vehicles = new Vehicles(this, Keys.VEHICLE_RENT_DATES__RENTDATESVEHICLEIDFK);

        return _vehicles;
    }

    @Override
    public VehicleRentDates as(String alias) {
        return new VehicleRentDates(DSL.name(alias), this);
    }

    @Override
    public VehicleRentDates as(Name alias) {
        return new VehicleRentDates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleRentDates rename(String name) {
        return new VehicleRentDates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleRentDates rename(Name name) {
        return new VehicleRentDates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
