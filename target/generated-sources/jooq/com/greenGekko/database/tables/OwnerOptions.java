/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.OwnerOptionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OwnerOptions extends TableImpl<OwnerOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owner_options</code>
     */
    public static final OwnerOptions OWNER_OPTIONS = new OwnerOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnerOptionsRecord> getRecordType() {
        return OwnerOptionsRecord.class;
    }

    /**
     * The column <code>public.owner_options.id</code>.
     */
    public final TableField<OwnerOptionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.owner_options.owner_id</code>.
     */
    public final TableField<OwnerOptionsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.owner_options.option_1</code>.
     */
    public final TableField<OwnerOptionsRecord, Boolean> OPTION_1 = createField(DSL.name("option_1"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.owner_options.option_2</code>.
     */
    public final TableField<OwnerOptionsRecord, Boolean> OPTION_2 = createField(DSL.name("option_2"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.owner_options.option_3</code>.
     */
    public final TableField<OwnerOptionsRecord, Boolean> OPTION_3 = createField(DSL.name("option_3"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private OwnerOptions(Name alias, Table<OwnerOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OwnerOptions(Name alias, Table<OwnerOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.owner_options</code> table reference
     */
    public OwnerOptions(String alias) {
        this(DSL.name(alias), OWNER_OPTIONS);
    }

    /**
     * Create an aliased <code>public.owner_options</code> table reference
     */
    public OwnerOptions(Name alias) {
        this(alias, OWNER_OPTIONS);
    }

    /**
     * Create a <code>public.owner_options</code> table reference
     */
    public OwnerOptions() {
        this(DSL.name("owner_options"), null);
    }

    public <O extends Record> OwnerOptions(Table<O> child, ForeignKey<O, OwnerOptionsRecord> key) {
        super(child, key, OWNER_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<OwnerOptionsRecord, Integer> getIdentity() {
        return (Identity<OwnerOptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OwnerOptionsRecord> getPrimaryKey() {
        return Keys.OWNEROPTIONSPKEY;
    }

    @Override
    public List<UniqueKey<OwnerOptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<OwnerOptionsRecord>>asList(Keys.OWNEROPTIONSPKEY);
    }

    @Override
    public List<ForeignKey<OwnerOptionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OwnerOptionsRecord, ?>>asList(Keys.OWNER_OPTIONS__OWNERSIDFK);
    }

    private transient Owners _owners;

    public Owners owners() {
        if (_owners == null)
            _owners = new Owners(this, Keys.OWNER_OPTIONS__OWNERSIDFK);

        return _owners;
    }

    @Override
    public OwnerOptions as(String alias) {
        return new OwnerOptions(DSL.name(alias), this);
    }

    @Override
    public OwnerOptions as(Name alias) {
        return new OwnerOptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnerOptions rename(String name) {
        return new OwnerOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnerOptions rename(Name name) {
        return new OwnerOptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
