/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.VehicleDocumentsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehicleDocuments extends TableImpl<VehicleDocumentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicle_documents</code>
     */
    public static final VehicleDocuments VEHICLE_DOCUMENTS = new VehicleDocuments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleDocumentsRecord> getRecordType() {
        return VehicleDocumentsRecord.class;
    }

    /**
     * The column <code>public.vehicle_documents.id</code>.
     */
    public final TableField<VehicleDocumentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle_documents.vehicle_id</code>.
     */
    public final TableField<VehicleDocumentsRecord, Integer> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vehicle_documents.document_url_1</code>.
     */
    public final TableField<VehicleDocumentsRecord, String> DOCUMENT_URL_1 = createField(DSL.name("document_url_1"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.vehicle_documents.document_url_2</code>.
     */
    public final TableField<VehicleDocumentsRecord, String> DOCUMENT_URL_2 = createField(DSL.name("document_url_2"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.vehicle_documents.document_url_3</code>.
     */
    public final TableField<VehicleDocumentsRecord, String> DOCUMENT_URL_3 = createField(DSL.name("document_url_3"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.vehicle_documents.created_at</code>.
     */
    public final TableField<VehicleDocumentsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.vehicle_documents.updated_at</code>.
     */
    public final TableField<VehicleDocumentsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private VehicleDocuments(Name alias, Table<VehicleDocumentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VehicleDocuments(Name alias, Table<VehicleDocumentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicle_documents</code> table reference
     */
    public VehicleDocuments(String alias) {
        this(DSL.name(alias), VEHICLE_DOCUMENTS);
    }

    /**
     * Create an aliased <code>public.vehicle_documents</code> table reference
     */
    public VehicleDocuments(Name alias) {
        this(alias, VEHICLE_DOCUMENTS);
    }

    /**
     * Create a <code>public.vehicle_documents</code> table reference
     */
    public VehicleDocuments() {
        this(DSL.name("vehicle_documents"), null);
    }

    public <O extends Record> VehicleDocuments(Table<O> child, ForeignKey<O, VehicleDocumentsRecord> key) {
        super(child, key, VEHICLE_DOCUMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VehicleDocumentsRecord> getPrimaryKey() {
        return Keys.VEHICLEDOCUMENTSPK;
    }

    @Override
    public List<UniqueKey<VehicleDocumentsRecord>> getKeys() {
        return Arrays.<UniqueKey<VehicleDocumentsRecord>>asList(Keys.VEHICLEDOCUMENTSPK);
    }

    @Override
    public List<ForeignKey<VehicleDocumentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VehicleDocumentsRecord, ?>>asList(Keys.VEHICLE_DOCUMENTS__VEHICLESOWNERIDFK);
    }

    private transient Vehicles _vehicles;

    public Vehicles vehicles() {
        if (_vehicles == null)
            _vehicles = new Vehicles(this, Keys.VEHICLE_DOCUMENTS__VEHICLESOWNERIDFK);

        return _vehicles;
    }

    @Override
    public VehicleDocuments as(String alias) {
        return new VehicleDocuments(DSL.name(alias), this);
    }

    @Override
    public VehicleDocuments as(Name alias) {
        return new VehicleDocuments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleDocuments rename(String name) {
        return new VehicleDocuments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleDocuments rename(Name name) {
        return new VehicleDocuments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
