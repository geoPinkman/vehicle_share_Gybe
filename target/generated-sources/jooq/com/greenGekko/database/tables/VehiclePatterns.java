/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.VehiclePatternsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehiclePatterns extends TableImpl<VehiclePatternsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicle_patterns</code>
     */
    public static final VehiclePatterns VEHICLE_PATTERNS = new VehiclePatterns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiclePatternsRecord> getRecordType() {
        return VehiclePatternsRecord.class;
    }

    /**
     * The column <code>public.vehicle_patterns.id</code>.
     */
    public final TableField<VehiclePatternsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.vehicle_type</code>.
     */
    public final TableField<VehiclePatternsRecord, String> VEHICLE_TYPE = createField(DSL.name("vehicle_type"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.company</code>.
     */
    public final TableField<VehiclePatternsRecord, String> COMPANY = createField(DSL.name("company"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.model</code>.
     */
    public final TableField<VehiclePatternsRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.color</code>.
     */
    public final TableField<VehiclePatternsRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.gearbox</code>.
     */
    public final TableField<VehiclePatternsRecord, String> GEARBOX = createField(DSL.name("gearbox"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.engine_value</code>.
     */
    public final TableField<VehiclePatternsRecord, Integer> ENGINE_VALUE = createField(DSL.name("engine_value"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle_patterns.year_of_issue</code>.
     */
    public final TableField<VehiclePatternsRecord, Integer> YEAR_OF_ISSUE = createField(DSL.name("year_of_issue"), SQLDataType.INTEGER.nullable(false), this, "");

    private VehiclePatterns(Name alias, Table<VehiclePatternsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VehiclePatterns(Name alias, Table<VehiclePatternsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicle_patterns</code> table reference
     */
    public VehiclePatterns(String alias) {
        this(DSL.name(alias), VEHICLE_PATTERNS);
    }

    /**
     * Create an aliased <code>public.vehicle_patterns</code> table reference
     */
    public VehiclePatterns(Name alias) {
        this(alias, VEHICLE_PATTERNS);
    }

    /**
     * Create a <code>public.vehicle_patterns</code> table reference
     */
    public VehiclePatterns() {
        this(DSL.name("vehicle_patterns"), null);
    }

    public <O extends Record> VehiclePatterns(Table<O> child, ForeignKey<O, VehiclePatternsRecord> key) {
        super(child, key, VEHICLE_PATTERNS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VehiclePatternsRecord> getPrimaryKey() {
        return Keys.VEHICLEPATTERNSPKEY;
    }

    @Override
    public List<UniqueKey<VehiclePatternsRecord>> getKeys() {
        return Arrays.<UniqueKey<VehiclePatternsRecord>>asList(Keys.VEHICLEPATTERNSPKEY, Keys.ALLFIELDSAREUNIQUE);
    }

    @Override
    public VehiclePatterns as(String alias) {
        return new VehiclePatterns(DSL.name(alias), this);
    }

    @Override
    public VehiclePatterns as(Name alias) {
        return new VehiclePatterns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VehiclePatterns rename(String name) {
        return new VehiclePatterns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VehiclePatterns rename(Name name) {
        return new VehiclePatterns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
