/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.OwnersRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Owners extends TableImpl<OwnersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owners</code>
     */
    public static final Owners OWNERS = new Owners();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnersRecord> getRecordType() {
        return OwnersRecord.class;
    }

    /**
     * The column <code>public.owners.id</code>.
     */
    public final TableField<OwnersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.owners.firstname</code>.
     */
    public final TableField<OwnersRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.owners.lastname</code>.
     */
    public final TableField<OwnersRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.owners.company_name</code>.
     */
    public final TableField<OwnersRecord, String> COMPANY_NAME = createField(DSL.name("company_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.owners.phone_number</code>.
     */
    public final TableField<OwnersRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.owners.address</code>.
     */
    public final TableField<OwnersRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.owners.rating</code>.
     */
    public final TableField<OwnersRecord, BigDecimal> RATING = createField(DSL.name("rating"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.owners.created_at</code>.
     */
    public final TableField<OwnersRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.owners.updated_at</code>.
     */
    public final TableField<OwnersRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.owners.user_id</code>.
     */
    public final TableField<OwnersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    private Owners(Name alias, Table<OwnersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Owners(Name alias, Table<OwnersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.owners</code> table reference
     */
    public Owners(String alias) {
        this(DSL.name(alias), OWNERS);
    }

    /**
     * Create an aliased <code>public.owners</code> table reference
     */
    public Owners(Name alias) {
        this(alias, OWNERS);
    }

    /**
     * Create a <code>public.owners</code> table reference
     */
    public Owners() {
        this(DSL.name("owners"), null);
    }

    public <O extends Record> Owners(Table<O> child, ForeignKey<O, OwnersRecord> key) {
        super(child, key, OWNERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<OwnersRecord, Integer> getIdentity() {
        return (Identity<OwnersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OwnersRecord> getPrimaryKey() {
        return Keys.OWNERSPKEY;
    }

    @Override
    public List<UniqueKey<OwnersRecord>> getKeys() {
        return Arrays.<UniqueKey<OwnersRecord>>asList(Keys.OWNERSPKEY);
    }

    @Override
    public List<ForeignKey<OwnersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OwnersRecord, ?>>asList(Keys.OWNERS__OWNERS_USER_ID_FKEY);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.OWNERS__OWNERS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public Owners as(String alias) {
        return new Owners(DSL.name(alias), this);
    }

    @Override
    public Owners as(Name alias) {
        return new Owners(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Owners rename(String name) {
        return new Owners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Owners rename(Name name) {
        return new Owners(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, BigDecimal, OffsetDateTime, OffsetDateTime, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
