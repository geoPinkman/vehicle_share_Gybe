/*
 * This file is generated by jOOQ.
 */
package com.greenGekko.database.tables;


import com.greenGekko.database.Keys;
import com.greenGekko.database.Public;
import com.greenGekko.database.tables.records.UsersAuthRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersAuth extends TableImpl<UsersAuthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_auth</code>
     */
    public static final UsersAuth USERS_AUTH = new UsersAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersAuthRecord> getRecordType() {
        return UsersAuthRecord.class;
    }

    /**
     * The column <code>public.users_auth.id</code>.
     */
    public final TableField<UsersAuthRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_auth.email</code>.
     */
    public final TableField<UsersAuthRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.users_auth.system_code</code>.
     */
    public final TableField<UsersAuthRecord, String> SYSTEM_CODE = createField(DSL.name("system_code"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.users_auth.created_at</code>.
     */
    public final TableField<UsersAuthRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.users_auth.code_status</code>.
     */
    public final TableField<UsersAuthRecord, String> CODE_STATUS = createField(DSL.name("code_status"), SQLDataType.VARCHAR(32), this, "");

    private UsersAuth(Name alias, Table<UsersAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersAuth(Name alias, Table<UsersAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_auth</code> table reference
     */
    public UsersAuth(String alias) {
        this(DSL.name(alias), USERS_AUTH);
    }

    /**
     * Create an aliased <code>public.users_auth</code> table reference
     */
    public UsersAuth(Name alias) {
        this(alias, USERS_AUTH);
    }

    /**
     * Create a <code>public.users_auth</code> table reference
     */
    public UsersAuth() {
        this(DSL.name("users_auth"), null);
    }

    public <O extends Record> UsersAuth(Table<O> child, ForeignKey<O, UsersAuthRecord> key) {
        super(child, key, USERS_AUTH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UsersAuthRecord, Integer> getIdentity() {
        return (Identity<UsersAuthRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersAuthRecord> getPrimaryKey() {
        return Keys.USERSAUTHPKEY;
    }

    @Override
    public List<UniqueKey<UsersAuthRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersAuthRecord>>asList(Keys.USERSAUTHPKEY);
    }

    @Override
    public UsersAuth as(String alias) {
        return new UsersAuth(DSL.name(alias), this);
    }

    @Override
    public UsersAuth as(Name alias) {
        return new UsersAuth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAuth rename(String name) {
        return new UsersAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAuth rename(Name name) {
        return new UsersAuth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
